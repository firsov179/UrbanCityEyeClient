def get_feature_color(feature):
    role = feature.get('properties', {}).get('role', '')

    if role in TRANSPORT_OBJECTS:
        return TRANSPORT_COLOR
    elif role in HOUSING_OBJECTS:
        return HOUSING_COLOR
    else:
        return DEFAULT_COLOR

def style_function(feature):
    return {
        "color": get_feature_color(feature),
        "weight": 2,
        "opacity": 0.7,
        "fillOpacity": 0.2
    }

def update_geo_layers(self, geo_objects, preserve_zoom=False):
    try:
        if preserve_zoom and self.map:
            current_zoom = self.map.getZoom()
            current_center = self.map.getCenter()

        if 'main' in self.layers and self.layers['main']:
            try:
                self.map.removeLayer(self.layers['main'])
            except Exception as e:
                error(f"Error removing existing layer: {e}")
            self.layers['main'] = None

        geo_json_str = json.dumps(geo_objects)
        geo_json_obj = js.JSON.parse(geo_json_str)

        layer = js.L.geoJSON(geo_json_obj, {"style": style_function})

        layer.addTo(self.map)
        self.layers['main'] = layer

        if not preserve_zoom:
            try:
                bounds = layer.getBounds()
                if bounds and hasattr(bounds, 'isValid') and bounds.isValid():
                    self.map.fitBounds(bounds)
            except Exception as e:
                log(f"Could not fit map to bounds: {e}")
        else:
            if 'current_zoom' in locals() and 'current_center' in locals():
                try:
                    self.map.setView([current_center.lat, current_center.lng], current_zoom)
                except Exception as e:
                    error(f"Error restoring zoom and center: {e}")

        log("GeoJSON layer updated successfully")

    except Exception as e:
        import traceback
        error(f"Error updating geo layers: {str(e)}")
        error(traceback.format_exc())








def get_feature_color(feature):
    role = feature.get('properties', {}).get('role', '')

    for category, color in CATEGORY_COLORS.items():
        if role.startswith(category):
            return color

    return DEFAULT_COLOR





def style_function(feature):
    return {
        "color": get_feature_color(feature),
        "weight": 2,
        "opacity": 0.7,
        "fillOpacity": 0.2
    }

def update_geo_layers(self, geo_objects, preserve_zoom=False):
    try:
        if preserve_zoom and self.map:
            current_zoom = self.map.getZoom()
            current_center = self.map.getCenter()

        if 'main' in self.layers and self.layers['main']:
            try:
                self.map.removeLayer(self.layers['main'])
            except Exception as e:
                error(f"Error removing existing layer: {e}")
            self.layers['main'] = None

        geo_json_str = json.dumps(geo_objects)
        geo_json_obj = js.JSON.parse(geo_json_str)

        layer = js.L.geoJSON(geo_json_obj, {"style": style_function})

        layer.addTo(self.map)
        self.layers['main'] = layer

        if not preserve_zoom:
            try:
                bounds = layer.getBounds()
                if bounds and hasattr(bounds, 'isValid') and bounds.isValid():
                    self.map.fitBounds(bounds)
            except Exception as e:
                log(f"Could not fit map to bounds: {e}")
        else:
            if 'current_zoom' in locals() and 'current_center' in locals():
                try:
                    self.map.setView([current_center.lat, current_center.lng], current_zoom)
                except Exception as e:
                    error(f"Error restoring zoom and center: {e}")

        log("GeoJSON layer updated successfully")

    except Exception as e:
        import traceback
        error(f"Error updating geo layers: {str(e)}")
        error(traceback.format_exc())




def get_feature_color(feature):
    properties = feature.get('properties', {})
    role = properties.get('role', '')

    if role in CATEGORY_COLORS:
        return CATEGORY_COLORS[role]

    for category, color in CATEGORY_COLORS.items():
        if role.startswith(category):
            return color

    return DEFAULT_COLOR




def style_function(feature):
    return {
        "color": get_feature_color(feature),
        "weight": 2,
        "opacity": 0.7,
        "fillOpacity": 0.2
    }







